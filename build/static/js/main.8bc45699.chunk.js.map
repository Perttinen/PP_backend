{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA8LeA,G,iBApCH,WAAO,IAAD,EAEOC,mBAAS,IAFhB,6BAyBhB,OAEE,8BACA,mDC1KWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8bc45699.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nconst printOneOrderLine = (r) => {\n  return <tr key={r.so}> \n  <td>{r.lDate}</td>\n  <td>{r.so}</td>                                         \n  <td>{r.site}</td>                                                \n  <td>{r.machines.Cador}</td>\n  <td>{r.machines.Permatic}</td>\n  <td>{r.machines.Perfekt}</td>\n  <td>{r.machines.Syntax}</td>\n  <td>{r.machines.Concept}</td>                                           \n  <td>{r.machines.MiniSyntax}</td>\n  <td>{r.machines.Format}</td>\n  <td>{r.machines.Progress}</td>\n</tr>\n}\nconst printOneOrderLineNodate = (r) => {\n  return <tr key={r.so}> \n  <td>{''}</td>\n  <td>{r.so}</td>                                         \n  <td>{r.site}</td>                                                \n  <td>{r.machines.Cador}</td>\n  <td>{r.machines.Permatic}</td>\n  <td>{r.machines.Perfekt}</td>\n  <td>{r.machines.Syntax}</td>\n  <td>{r.machines.Concept}</td>                                           \n  <td>{r.machines.MiniSyntax}</td>\n  <td>{r.machines.Format}</td>\n  <td>{r.machines.Progress}</td>\n</tr>\n}\n\nconst printOneDayTotalWeightByMachineLine = (day, data) => {\n  let allMachines = {Cador:null, Permatic:null, Perfekt:null, Syntax:null, Concept:null, MiniSyntax:null, Format:null, Progress:null}\n  for(let i = 0; i<data.length; i++){\n    if(data[i].lDate.includes(day)){\n    \n      for(let c = 0; c<Object.keys(data[i].machines).length; c++){\n        allMachines[Object.keys(data[i].machines)[c]] += data[i].machines[Object.keys(data[i].machines)[c]]\n      }\n  }\n\n  // for(let i = 0; i<Object.keys(allMachines).length;i++){\n  //   if(allMachines[Object.keys(allMachines)[i]] === 0){\n  //     allMachines[Object.keys(allMachines)[i]] = null\n  //   }\n  // }\n  \n  }\n  return <tr class=\"sumLine\"> \n  <td>{''}</td>\n  <td>{''}</td>                                         \n  <td>{''}</td>                                                \n  <td>{allMachines.Cador}</td>\n  <td>{allMachines.Permatic}</td>\n  <td>{allMachines.Perfekt}</td>\n  <td>{allMachines.Syntax}</td>\n  <td>{allMachines.Concept}</td>                                           \n  <td>{allMachines.MiniSyntax}</td>\n  <td>{allMachines.Format}</td>\n  <td>{allMachines.Progress}</td>\n</tr>\n}\n\nconst createOrderObjects = (data) => {\nif(data.length > 1){\n  let orderObjects = []\n  orderObjects[0] = {\n    so: data[0].order_id,\n    lDate: data[0].loading_date,\n    site: data[0].building_site,\n    machines: {\n      [data[0].machine]: data[0].weight_kg,\n      }\n    }\n\n  for(let i = 1; i < data.length; i++){\n    for(let c = 0; c < orderObjects.length; c++){\n      if(data[i].order_id === orderObjects[c].so){\n        if(Object.keys(orderObjects[c].machines).includes(data[i].machine_name)){\n        orderObjects[c].machines[data[i].machine_name] += data[i].weight_kg\n        }else{\n          orderObjects[c].machines[data[i].machine_name] = data[i].weight_kg\n        }\n        break\n      }\n      if(c === orderObjects.length - 1){\n        orderObjects = orderObjects.concat({\n          so: data[i].order_id,\n          lDate: data[i].loading_date,\n          site: data[i].building_site,\n          machines: {\n            [data[i].machine_name]: data[i].weight_kg\n          }\n        })\n        c++\n      }\n    }\n  }\n  orderObjects = orderObjects.sort((a,b) => a.lDate.replaceAll('-','') -b.lDate.replaceAll('-',''))\n  \n  return orderObjects\n}\n\n}\n\nconst Show = ({data}) => {\n  if(data.length>1){\n    data.forEach(e => {\n      if(e.machine_name.includes('Mini S')){e.machine_name = 'MiniSyntax'}\n      if(e.machine_name.includes('Perf')){e.machine_name = 'Perfekt'}\n      if(e.machine_name.includes('ine')){e.machine_name = 'Syntax'}  \n  })\n  \n  let orderObjects = createOrderObjects(data)\n\n    const J = () => {\n      let rivit = []\n      rivit[0] = printOneOrderLine(orderObjects[0])\n\n      for(let i = 1; i<orderObjects.length;i++){\n        if(orderObjects[i].lDate !== orderObjects[i-1].lDate){\n          rivit = rivit.concat(printOneDayTotalWeightByMachineLine(orderObjects[i-1].lDate, orderObjects))\n        }\n        if(orderObjects[i].lDate === orderObjects[i-1].lDate){\n        rivit = rivit.concat(printOneOrderLineNodate(orderObjects[i]))\n        }else{\n          rivit=rivit.concat(printOneOrderLine(orderObjects[i]))\n        }\n\n      }\n      printOneDayTotalWeightByMachineLine('2020-11-24', orderObjects)\n      return rivit\n    }\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>PVM</th><th>Tilausnumero</th><th>Kohde</th><th>Cador</th><th>Tupla</th><th>Pöytä</th><th>Syntax</th><th>Concept</th><th>Minisyntax</th>\n            <th>Format</th><th>Progress</th>\n          </tr>\n        </thead>\n        <tbody>\n          <J/>\n        </tbody>\n      </table>\n    )\n  }\n  return 'Ladataan...'\n}\n\nconst App = () => {\n\n  const [data,setData] = useState([])\n\n  // useEffect(() => {\n  \n  //   setInterval(() => {\n  //   axios\n  //     .get('http://s237-0075:3005/indalgo/management/optimizer/get_table_data/pending_production')\n  //     .then(res =>{ setData(res.data) \n  //     console.log(new Date())  }              \n  //     ) },120000)\n  //     }    \n  //     ,[])\n\n      // useEffect(() => {\n      //   axios\n      //     .get('http://s237-0075:3005/indalgo/management/optimizer/get_table_data/pending_production')\n      //     .then(res =>setData(res.data))\n      //     }    \n      //     ,[])\n\n      //     createOrderObjects(data)\n\n\n  return (\n    \n    <div>\n    <h1>SteelReporter</h1>\n{/* <Show data={data}/> */}\n \n    </div>\n    \n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}